#!/bin/sh

# Shared State Async
# Copyright (c) 2024 Javier Jorge <jjorge@inti.gob.ar>
# Copyright (c) 2024 Instituto Nacional de Tecnologia Industrial
# Copyright (C) 2024 Asociacion Civil Altermundi <info@altermundi.net>
# SPDX-License-Identifier: AGPL-3.0-only


sinc_args=""
 
case "$1" in 
    list) 
        echo '{ "sync": { "data_type": "str", "peers_ip": "str" }, "get": { "data_type": "str" },  "publish": { "data_type": "str" }, "publish_all": { },"insert": { "data_type": "str", "json": "str" } }'
    ;; 
    call)
        # source jshn shell library
        . /usr/share/libubox/jshn.sh
        read msg
        json_load $msg
        json_get_vars data_type 
        json_get_vars peers_ip
        json=$(jsonfilter -s $msg -e "@.json")
        if json_is_a peers_ip array
        then
            json_select peers_ip
            idx=1
            ips=""
            while json_is_a ${idx} string  ## iterate over data inside "peersip" object
            do
                json_get_var ip_addr $idx
                ips="$ips$ip_addr "
                idx=$(( idx + 1 ))
            done
        else
            ips=$peers_ip
        fi
        case "$2" in 
            get) 
                if output=$(shared-state-async get $data_type 2>/dev/null) 
                then 
                    echo {\"data\": $output , \"error\" :$?}
                else 
                    echo {\"data\": {} , \"error\": $? } 
                fi 
            ;; 
            sync) 
                shared-state-async sync $data_type $ips > /dev/null 2>&1
                echo {\"data\": {} , \"error\": $? } 
            ;; 
            publish) 
                /usr/share/shared-state/publishers/shared-state-publish_$data_type > /dev/null 2>&1
                echo {\"data\": {} , \"error\": $? } 
            ;;
            publish_all)
                shared-state-async-publish-all > /dev/null 2>&1
                echo {\"data\": {} , \"error\": $? }
            ;;
            insert)
                printf '%s' "$json" | shared-state-async insert $data_type > /dev/null 2>&1 
                echo {\"data\": {} , \"error\": $? }
            ;;
            *)
                 echo '{\"data\" {} ,\"error\" = "Method not found"}' 
            ;; 
        esac 
    ;; 
esac 
